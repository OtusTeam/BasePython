"""add limit to full_name col on users table

Revision ID: 1063274a79f1
Revises: d43c2b46e4e1
Create Date: 2023-11-08 21:24:36.517272

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "1063274a79f1"
down_revision: Union[str, None] = "d43c2b46e4e1"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # sql = """
    # UPDATE users
    # SET full_name = substring(full_name, 1, 70)
    # WHERE length(full_name) > 50;
    # """

    metadata = sa.MetaData()
    metadata.reflect(bind=op.get_bind())
    users_table = metadata.tables["users"]
    update_stmt = sa.update(
        users_table,
    ).where(
        sa.func.length(users_table.c.full_name) > 50,
    ).values({
        # users_table.c.full_name: None,
        # users_table.c.full_name: "abc",
        users_table.c.full_name: sa.func.substring(users_table.c.full_name, 1, 50),
    })
    op.execute(update_stmt)
    op.alter_column(
        "users",
        "full_name",
        existing_type=sa.VARCHAR(length=100),
        type_=sa.String(length=50),
        existing_nullable=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "users",
        "full_name",
        existing_type=sa.String(length=50),
        type_=sa.VARCHAR(length=100),
        existing_nullable=True,
    )
    # ### end Alembic commands ###
