image: python:3.10

before_script:
  - python --version
  - pip install --upgrade pip
  - pip install -r requirements.txt
  - pip install -r requirements-dev.txt

stages:          # List of stages for jobs, and their order of execution
  - testing
  - build
  - deploy

test:       # This job runs in the build stage, which runs first.
  stage: testing
  services:
    - postgres
  variables:
    POSTGRES_DB: "blog"
    POSTGRES_USER: "username"
    POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    CONFIG_CLASS: "TestingConfig"
    COVERAGE_DIR: "coverage-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
  script:
    - flask db upgrade
    - pytest -s -vv -rsx --cov=app --cov=views --cov=models --cov-report=html:$COVERAGE_DIR
  artifacts:
    name: "coverage-report-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - $COVERAGE_DIR
    when: on_success
    expire_in: 1 week


lint:   # This job runs in the test stage.
  stage: testing    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "RUN pylint. OK :) ..."

make-build:   # This job also runs in the test stage.
  stage: build    # It can run at the same time as unit-test-job (in parallel).
  image: docker:20.10.16
  only:
    - main
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker info
    - apk add --no-cache docker-compose
    - echo "test variable"
    - echo $DOCKER_HUB_PASSWORD
    - - echo "test variable end"
    - docker login -u danteonline -p $DOCKER_HUB_PASSWORD
  script:
    - echo "make build ..."
    - docker-compose pull app || true
    - docker-compose build app
    - docker-compose push app
    - echo "success build and push"


deploy:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Deploy..."
